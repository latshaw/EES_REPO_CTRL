// epcs.v

// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module epcs (
		input  wire        clkin,         //         clkin.clk
		input  wire        read,          //          read.read
		input  wire        rden,          //          rden.rden
		input  wire [31:0] addr,          //          addr.addr
		input  wire        write,         //         write.write
		input  wire [7:0]  datain,        //        datain.datain
		input  wire        sector_erase,  //  sector_erase.sector_erase
		input  wire        wren,          //          wren.wren
		input  wire        en4b_addr,     //     en4b_addr.en4b_addr
		input  wire        reset,         //         reset.reset
		input  wire [2:0]  sce,           //           sce.sce
		output wire [7:0]  dataout,       //       dataout.dataout
		output wire        busy,          //          busy.busy
		output wire        data_valid,    //    data_valid.data_valid
		output wire        illegal_write, // illegal_write.illegal_write
		output wire        illegal_erase  // illegal_erase.illegal_erase
	);

	epcs_altera_asmi_parallel_181_o677haq asmi_parallel_0 (
		.clkin         (clkin),         //   input,   width = 1,         clkin.clk
		.read          (read),          //   input,   width = 1,          read.read
		.rden          (rden),          //   input,   width = 1,          rden.rden
		.addr          (addr),          //   input,  width = 32,          addr.addr
		.write         (write),         //   input,   width = 1,         write.write
		.datain        (datain),        //   input,   width = 8,        datain.datain
		.sector_erase  (sector_erase),  //   input,   width = 1,  sector_erase.sector_erase
		.wren          (wren),          //   input,   width = 1,          wren.wren
		.en4b_addr     (en4b_addr),     //   input,   width = 1,     en4b_addr.en4b_addr
		.reset         (reset),         //   input,   width = 1,         reset.reset
		.sce           (sce),           //   input,   width = 3,           sce.sce
		.dataout       (dataout),       //  output,   width = 8,       dataout.dataout
		.busy          (busy),          //  output,   width = 1,          busy.busy
		.data_valid    (data_valid),    //  output,   width = 1,    data_valid.data_valid
		.illegal_write (illegal_write), //  output,   width = 1, illegal_write.illegal_write
		.illegal_erase (illegal_erase)  //  output,   width = 1, illegal_erase.illegal_erase
	);

endmodule
